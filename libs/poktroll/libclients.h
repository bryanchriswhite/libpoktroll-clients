/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/pokt-network/poktroll/pkg/client/cgo_exports */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 12 "block_client.go"
 #include <client.h>

#line 1 "cgo-generated-wrapper"

#line 3 "block_query_client.go"

 #include <client.h>
 #include <stdint.h>
 #include <errno.h>

#line 1 "cgo-generated-wrapper"

#line 3 "depinject.go"
 #include <client.h>

#line 1 "cgo-generated-wrapper"

#line 6 "errors.go"

 #include <client.h>

#line 1 "cgo-generated-wrapper"

#line 3 "events_query_client.go"

 #include <client.h>
 #include <stdint.h>
 #include <errno.h>

#line 1 "cgo-generated-wrapper"

#line 3 "memory.go"
 #include <client.h>

#line 1 "cgo-generated-wrapper"

#line 3 "tx_client.go"
 #include <client.h>

#line 1 "cgo-generated-wrapper"

#line 3 "tx_context.go"
 #include <client.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern GoRef NewBlockClient(GoRef depsRef, char** cErr);
extern GoRef NewBlockQueryClient(char* cometWebsocketURL, char** cErr);
extern GoRef BlockQueryClientBlock(GoRef clientRef, int64_t* cHeight, char** cErr);
extern GoRef Supply(GoRef goRef, char** cErr);
extern GoRef SupplyMany(GoRef* goRefs, int numGoRefs, char** cErr);
extern GoRef Config(GoRef* goRefs, int numGoRefs, char** cErr);
extern GoString GetErrMessage(GoInt code);
extern GoRef NewEventsQueryClient(char* cometWebsocketURLCString);
extern GoRef EventsQueryClientEventsBytes(GoRef clientRef, char* query, char** cErr);

// TODO_IN_THIS_COMMIT: godoc...
//
extern void FreeGoMem(GoRef ref);

// TODO_IN_THIS_COMMIT: godoc...
// TODO_IN_THIS_COMMIT: add seperate constructor which supports options...
//
extern GoRef NewTxClient(GoRef depsRef, char* signingKeyName, char** cErr);
extern GoRef WithSigningKeyName(char* keyName);

// TODO_IN_THIS_COMMIT: godoc...
// TODO_IMPROVE: support multiple msgs (if top-level JSON array).
// TODO_IMPROVE: support (in a seperate method) proto msg bytes.
//
extern GoRef SignAndBroadcast(GoRef txClientRef, char* msgAnyJSON, char** cErr);

// TODO_IN_THIS_COMMIT: godoc...
// TODO_IN_THIS_COMMIT: add seperate constructor which supports deps...
// func NewTxContext(depsRef C.GoRef, cErr **C.char) C.GoRef {
//
extern GoRef NewTxContext(char* tcpURL, char** cErr);

#ifdef __cplusplus
}
#endif
